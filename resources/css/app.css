@import 'tailwindcss';

/* these are necessary styles for vue flow */
@import '@vue-flow/core/dist/style.css';

/* this contains the default theme, these are optional styles */
@import '@vue-flow/core/dist/theme-default.css';

@plugin 'tailwindcss-animate';

@source '../views';
@source '../../vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php';
@source '../js';

@custom-variant dark (&:is(.dark *));

@theme {
  --color-vusa-red: #bd2835;
  --color-vusa-red-secondary: #8c1d27;
  --color-vusa-red-tertiary: #bb2734;
  --color-vusa-red-quaternary: #d74350;
  --color-vusa-red-dark: #5d131a;
  --color-vusa-yellow: #fbb01b;
  --color-vusa-yellow-secondary: #de9503;
  --color-vusa-yellow-tertiary: #fbb120;
  --color-vusa-yellow-quaternary: #fcc557;
  --color-vusa-yellow-dark: #a77002;

  --grid-template-columns-ram-fill: repeat(auto-fill, minmax(320px, 1fr));
  --grid-template-columns-ram-fit: repeat(auto-fit, minmax(320px, 1fr));

  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;
  --animate-collapsible-down: collapsible-down 0.2s ease-in-out;
  --animate-collapsible-up: collapsible-up 0.2s ease-in-out;

  @keyframes accordion-down {
    from {
      height: 0;
    }
    to {
      height: var(--reka-accordion-content-height);
    }
  }
  @keyframes accordion-up {
    from {
      height: var(--reka-accordion-content-height);
    }
    to {
      height: 0;
    }
  }
  @keyframes collapsible-down {
    from {
      height: 0;
    }
    to {
      height: var(--reka-collapsible-content-height);
    }
  }
  @keyframes collapsible-up {
    from {
      height: var(--reka-collapsible-content-height);
    }
    to {
      height: 0;
    }
  }
}

@utility container {
  margin-inline: auto;
  padding-inline: 2rem;
  @media (width >= --theme(--breakpoint-sm)) {
    max-width: none;
  }
  @media (width >= 1400px) {
    max-width: 1400px;
  }
}

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}

@layer base {

  h1 {
    @apply text-2xl md:text-4xl font-black mt-4 mb-6 text-gray-900 dark:text-zinc-100;
  }

  h2 {
    @apply text-xl md:text-2xl font-bold mb-2 text-gray-900 dark:text-zinc-100;
  }

  h3 {
    @apply text-lg md:text-xl font-bold mb-2 text-gray-900 dark:text-zinc-100;
  }

  h4 {
    @apply text-base md:text-lg font-bold mb-2 text-gray-900 dark:text-zinc-100;
  }

  a:not(.plain) {
    @apply hover:text-vusa-red duration-200;
  }

  p>a {
    @apply underline;
  }
}

html.dark {
  color-scheme: dark;
}

.typography {

  h1 {
    @apply scroll-mt-32 text-4xl font-bold tracking-tight lg:text-5xl
  }

  h2 {
    @apply scroll-mt-32 border-b border-zinc-200 dark:border-zinc-600 pb-2 text-3xl font-semibold transition-colors first:mt-2
  }

  h3 {
    @apply scroll-mt-32 text-2xl font-semibold tracking-tight
  }

  table p {
    @apply my-0
  }

  blockquote {
    @apply mt-6 border-l-2 pl-6 italic
  }

  p {
    @apply not-first:mt-6 mt-4 mb-5
  }

  a {
    @apply underline
  }

  ul,
  ol {
    @apply ml-4 [&>li]:mt-2;
  }

  ul {
    @apply list-disc;
  }

  ol {
    @apply list-decimal;
  }
}

.not-typography {
  p {
    margin-top: 0.5rem;

    &:last-child {
      margin-bottom: 0;
    }
  }
}

/* 
  Only keeping essential global classes that represent layout patterns
  that would be cumbersome as inline utilities

  NOTE: Do not use tailwindcss-typography plugin here as it conflicts with our custom styling
*/
.wrapper {
  display: grid;
  grid-template-columns: 
    minmax(2rem, 1fr) 
    min(calc(100% - 4rem), 1200px) 
    minmax(2rem, 1fr);
  @apply max-md:mt-8 mt-16
}

.rich-content-wrapper > *:first-child {
  margin-top: 0 !important;
}

.rich-content-wrapper > *:last-child {
  margin-bottom: 0 !important;
}

.wrapper > * {
  grid-column: 2;
  /* Default horizontal padding for non-full-bleed elements */
  padding-left: 1rem;
  padding-right: 1rem;
  @media (width >= 768px) {
    padding-left: 2rem;
    padding-right: 2rem;
  }
}

.full-bleed {
  width: 100%;
  grid-column: 1 / 4;
  padding-left: 0;
  padding-right: 0;
}

/*This aligns form items to start, when MultiLocaleInput is present in the form.*/
.n-form-item {
  align-items: start;
}

.archive-document-link {
  /* Add pseudo class with icon */
  background-color: rgb(244 244 245);
  padding: 0.1rem 0.3rem;
  color: unset;
  text-decoration: none;
  transition-duration: 0.2s;
  border-radius: 0.3rem;
  font-size: 0.8rem;
}

.dark .archive-document-link {
  background-color: rgb(30 30 30);
}

.archive-document-link::before {
  margin-right: 0.3rem;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23000' d='M6 2a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9.828a2 2 0 0 0-.586-1.414l-5.828-5.828A2 2 0 0 0 12.172 2zm-.5 2a.5.5 0 0 1 .5-.5h6V8a2 2 0 0 0 2 2h4.5v10a.5.5 0 0 1-.5.5H6a.5.5 0 0 1-.5-.5zm11.88 4.5H14a.5.5 0 0 1-.5-.5V4.62z'/%3E%3C/svg%3E");
  background-size: 10px 10px;
  display: inline-block;
  width: 10px;
  height: 10px;
  content: "";
}

.dark .archive-document-link::before {
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23fff' d='M6 2a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9.828a2 2 0 0 0-.586-1.414l-5.828-5.828A2 2 0 0 0 12.172 2zm-.5 2a.5.5 0 0 1 .5-.5h6V8a2 2 0 0 0 2 2h4.5v10a.5.5 0 0 1-.5.5H6a.5.5 0 0 1-.5-.5zm11.88 4.5H14a.5.5 0 0 1-.5-.5V4.62z'/%3E%3C/svg%3E");
}

.archive-document-link:hover {
  background-color: rgb(230 230 231);
  color: #bd2835;
  text-decoration: underline;
}

.dark .archive-document-link:hover {
  background-color: rgb(40 40 40);
  color: #bd2835;
}

.basic-flow.dark {
  background: #2d3748;
  color: #fffffb
}

.basic-flow.dark .vue-flow__node {
  background: #4a5568;
  color: #fffffb
}

.basic-flow.dark .vue-flow__node.selected {
  background: #333;
  box-shadow: 0 0 0 2px #2563eb
}

.basic-flow .vue-flow__controls {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 4px;
}

.basic-flow.dark .vue-flow__controls {
  border: 1px solid #EEEEEE
}

.basic-flow .vue-flow__controls .vue-flow__controls-button {
  border: none;
  @apply bg-zinc-200/60 rounded-md px-3 cursor-pointer;
}

.basic-flow .vue-flow__controls .vue-flow__controls-button svg {
  height: 12px;
  width: 12px
}

.basic-flow .vue-flow__controls .vue-flow__controls-button {
  @apply border border-zinc-200 dark:border-zinc-500/30 bg-zinc-200/60 dark:bg-zinc-600 dark:fill-zinc-50 transition-shadow
}

.basic-flow .vue-flow__edge-text {
  @apply fill-zinc-900 dark:fill-zinc-50
}

.basic-flow .vue-flow__node-multiple-handle {
  @apply border border-zinc-300 dark:border-zinc-600;
}

.basic-flow .vue-flow__edge-textbg {
  @apply fill-zinc-50 dark:fill-zinc-900
}

/*Overwrite padding for node div, so button would use it*/

.vue-flow__node-default, .vue-flow__node-input, .vue-flow__node-output {
  padding: 0;
}